import os
import logging
import time
import random
import string
import json
import sys
import shutil
import platform
import traceback

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InputFile
import aiohttp
import asyncio
from datetime import datetime
from typing import Optional, Union, Dict, Any, List

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
YANDEX_DISK_TOKEN = os.getenv('YANDEX_DISK_TOKEN')
YANDEX_DISK_PATH = 'telegram_uploads'
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("telegram_yadisk_bot")
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


def generate_random_filename(extension: str = "txt", length: int = 8) -> str:
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
    filename = f"{random_string}.{extension}"
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
    return filename


def ensure_directory_exists(path: str):
    if not os.path.exists(path):
        logger.info(f"–°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {path}")
        os.makedirs(path)


def get_current_timestamp() -> str:
    return datetime.now().strftime("%Y-%m-%d_%H-%M-%S")


def log_exception(prefix: str, exc: Exception):
    logger.error(f"{prefix}: {str(exc)}")
    traceback.print_exc()


def safe_remove(path: str):
    try:
        if os.path.exists(path):
            os.remove(path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {path}")
    except Exception as e:
        log_exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞", e)


def is_supported_file(filename: str) -> bool:
    return any(filename.endswith(ext) for ext in [".txt", ".pdf", ".docx", ".jpg", ".png", ".zip"])


class YandexDiskClient:
    BASE_URL = 'https://cloud-api.yandex.net:443/v1/disk'

    def __init__(self, token: str):
        self.token = token
        self.headers = {'Authorization': f'OAuth {token}'}

    async def create_folder(self, path: str):
        url = f'{self.BASE_URL}/resources'
        params = {'path': path}
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.put(url, params=params) as resp:
                if resp.status == 201:
                    logger.info(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {path}")
                elif resp.status == 409:
                    logger.info(f"–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
                else:
                    text = await resp.text()
                    log_exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏", Exception(text))

    async def get_upload_url(self, path: str) -> Optional[str]:
        url = f'{self.BASE_URL}/resources/upload'
        params = {'path': path, 'overwrite': 'true'}
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.get(url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get('href')
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è upload_url: {resp.status}")
                    return None

    async def upload_file(self, local_path: str, disk_path: str):
        upload_url = await self.get_upload_url(disk_path)
        if not upload_url:
            logger.error("URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
            return

        async with aiohttp.ClientSession() as session:
            with open(local_path, 'rb') as f:
                async with session.put(upload_url, data=f) as resp:
                    if resp.status != 201:
                        text = await resp.text()
                        log_exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", Exception(text))

    async def get_public_link(self, path: str) -> Optional[str]:
        url = f'{self.BASE_URL}/resources/publish'
        params = {'path': path}
        async with aiohttp.ClientSession(headers=self.headers) as session:
            async with session.put(url, params=params) as resp:
                if resp.status in (200, 201):
                    data = await resp.json()
                    return data.get('public_url')
                else:
                    text = await resp.text()
                    log_exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏", Exception(text))
                    return None


yadisk = YandexDiskClient(YANDEX_DISK_TOKEN)


async def initialize_yadisk():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ...")
    await yadisk.create_folder(YANDEX_DISK_PATH)


loop = asyncio.get_event_loop()
loop.run_until_complete(initialize_yadisk())


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª ‚Äî —è –≤—Å—ë —Å–¥–µ–ª–∞—é —Å–∞–º!\n"
        "üîó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: 2 –ì–ë."
    )


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    file_id = message.document.file_id
    file_name = message.document.file_name or generate_random_filename()
    file_path_local = f"/tmp/{file_name}"
    file_path_disk = f"{YANDEX_DISK_PATH}/{file_name}"

    try:
        await download_file_locally(file_id, file_path_local)
        await yadisk.create_folder(YANDEX_DISK_PATH)
        await yadisk.upload_file(file_path_local, file_path_disk)
        public_url = await yadisk.get_public_link(file_path_disk)
        if public_url:
            await message.reply(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!\nüîó –°—Å—ã–ª–∫–∞: {public_url}")
        else:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        log_exception("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", e)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
    finally:
        safe_remove(file_path_local)


async def download_file_locally(file_id: str, destination: str):
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {file_id} –≤ {destination}")
        await bot.download_file_by_id(file_id, destination=destination)
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {destination}")
    except Exception as e:
        log_exception("–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", e)
        raise


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    await message.reply("üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


@dp.message_handler(content_types=types.ContentType.AUDIO)
async def handle_audio(message: types.Message):
    await message.reply("üéµ –ê—É–¥–∏–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


@dp.message_handler(content_types=types.ContentType.VIDEO)
async def handle_video(message: types.Message):
    await message.reply("üé• –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


@dp.message_handler()
async def fallback_message(message: types.Message):
    await message.reply("ü§ñ –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —è –∑–∞–≥—Ä—É–∑–∏–ª –µ–≥–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!")


def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()
